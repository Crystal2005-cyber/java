âš¡1. Why is Java Platform Independent?

Java programs are written once and can run anywhere â†’ WORA (Write Once, Run Anywhere).

This is achieved because:

Java source code (.java) is compiled into bytecode (.class) by the Java Compiler (javac).

Bytecode is not machine-specific â€“ itâ€™s an intermediate language.

The Java Virtual Machine (JVM) on each platform interprets (or JIT compiles) the bytecode into native machine code.

Since every OS (Windows, Linux, Mac, Android) has its own JVM implementation, the same bytecode can run anywhere without recompiling.

ðŸ‘‰ This bytecode + JVM mechanism makes Java platform independent.

âš¡2. Why is Java both interpreted and compiled?

Compiled:

Java source code is first compiled by javac into bytecode (.class).

Compilation happens only once.

Interpreted:

At runtime, the JVM interprets the bytecode line by line into native machine instructions.

Also JIT (Just-In-Time Compilation):

JVM also uses a JIT compiler that compiles frequently used parts of bytecode into native machine code for faster execution.

Hence, Java is hybrid â†’ both compiled (into bytecode) and interpreted (by JVM).

âš¡ 3. Why is Java considered slow?

Compared to languages like C/C++:

Extra Layer (JVM):

Java runs on JVM, not directly on hardware.

This extra interpretation makes it slower than native machine code.

Automatic Memory Management (Garbage Collection):

Garbage Collector (GC) adds overhead while reclaiming unused memory.

Abstraction & Security Checks:

Java performs runtime checks (array bounds, type casting, null pointer checks, etc.) which reduce raw speed.

ðŸ‘‰ However, with JIT compilation, modern Java is much faster than it used to be and often close to C++ speed in real-world applications.

 4. Guess the output:
    class Output {
    public static void main(String[] args) {
        System.out.println("1. println ");
        System.out.println("2. println ");
        System.out.print("1. print ");
        System.out.print("2. print");
    }
}
ðŸ”Ž Step-by-step execution:
System.out.println("1. println ");
â†’ Prints 1. println and moves to a new line.

System.out.println("2. println ");
â†’ Prints 2. println and moves to a new line.

System.out.print("1. print ");
â†’ Prints 1. print but does NOT move to a new line.

System.out.print("2. print");
â†’ Prints 2. print on the same line as above.

âœ… Final Output:
arduino
Copy
Edit
1. println 
2. println 
1. print 2. print
